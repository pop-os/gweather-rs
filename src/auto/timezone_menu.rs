// Generated by gir (https://github.com/gtk-rs/gir @ 350409c)
// from 
// from gir-files (./gir-files @ 38b7451)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "GWeatherTimezoneMenu")]
    pub struct TimezoneMenu(Object<ffi::GWeatherTimezoneMenu, ffi::GWeatherTimezoneMenuClass>);

    match fn {
        type_ => || ffi::gweather_timezone_menu_get_type(),
    }
}

impl TimezoneMenu {
    //#[doc(alias = "gweather_timezone_menu_new")]
    //pub fn new(top: /*Ignored*/&Location) -> TimezoneMenu {
    //    unsafe { TODO: call ffi:gweather_timezone_menu_new() }
    //}
}

pub const NONE_TIMEZONE_MENU: Option<&TimezoneMenu> = None;

pub trait TimezoneMenuExt: 'static {
    #[doc(alias = "gweather_timezone_menu_get_tzid")]
    #[doc(alias = "get_tzid")]
    fn tzid(&self) -> Option<glib::GString>;

    #[doc(alias = "gweather_timezone_menu_set_tzid")]
    fn set_tzid(&self, tzid: Option<&str>);

    #[doc(alias = "tzid")]
    fn connect_tzid_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<TimezoneMenu>> TimezoneMenuExt for O {
    fn tzid(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gweather_timezone_menu_get_tzid(self.as_ref().to_glib_none().0))
        }
    }

    fn set_tzid(&self, tzid: Option<&str>) {
        unsafe {
            ffi::gweather_timezone_menu_set_tzid(self.as_ref().to_glib_none().0, tzid.to_glib_none().0);
        }
    }

    fn connect_tzid_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_tzid_trampoline<P: IsA<TimezoneMenu>, F: Fn(&P) + 'static>(this: *mut ffi::GWeatherTimezoneMenu, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(TimezoneMenu::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::tzid\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_tzid_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for TimezoneMenu {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("TimezoneMenu")
    }
}
