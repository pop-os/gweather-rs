// Generated by gir (https://github.com/gtk-rs/gir @ 350409c)
// from 
// from gir-files (./gir-files @ 38b7451)
// DO NOT EDIT

use crate::Location;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "GWeatherLocationEntry")]
    pub struct LocationEntry(Object<ffi::GWeatherLocationEntry, ffi::GWeatherLocationEntryClass>);

    match fn {
        type_ => || ffi::gweather_location_entry_get_type(),
    }
}

impl LocationEntry {
    //#[doc(alias = "gweather_location_entry_new")]
    //pub fn new(top: &Location) -> LocationEntry {
    //    unsafe { TODO: call ffi:gweather_location_entry_new() }
    //}
}

pub const NONE_LOCATION_ENTRY: Option<&LocationEntry> = None;

pub trait LocationEntryExt: 'static {
    #[doc(alias = "gweather_location_entry_get_location")]
    #[doc(alias = "get_location")]
    fn location(&self) -> Option<Location>;

    #[doc(alias = "gweather_location_entry_has_custom_text")]
    fn has_custom_text(&self) -> bool;

    #[doc(alias = "gweather_location_entry_set_city")]
    fn set_city(&self, city_name: Option<&str>, code: &str) -> bool;

    #[doc(alias = "gweather_location_entry_set_location")]
    fn set_location(&self, loc: Option<&Location>);

    #[doc(alias = "show-named-timezones")]
    fn shows_named_timezones(&self) -> bool;

    #[doc(alias = "location")]
    fn connect_location_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<LocationEntry>> LocationEntryExt for O {
    fn location(&self) -> Option<Location> {
        unsafe {
            from_glib_full(ffi::gweather_location_entry_get_location(self.as_ref().to_glib_none().0))
        }
    }

    fn has_custom_text(&self) -> bool {
        unsafe {
            from_glib(ffi::gweather_location_entry_has_custom_text(self.as_ref().to_glib_none().0))
        }
    }

    fn set_city(&self, city_name: Option<&str>, code: &str) -> bool {
        unsafe {
            from_glib(ffi::gweather_location_entry_set_city(self.as_ref().to_glib_none().0, city_name.to_glib_none().0, code.to_glib_none().0))
        }
    }

    fn set_location(&self, loc: Option<&Location>) {
        unsafe {
            ffi::gweather_location_entry_set_location(self.as_ref().to_glib_none().0, loc.to_glib_none().0);
        }
    }

    fn shows_named_timezones(&self) -> bool {
        unsafe {
            let mut value = glib::Value::from_type(<bool as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"show-named-timezones\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `show-named-timezones` getter")
        }
    }

    fn connect_location_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_location_trampoline<P: IsA<LocationEntry>, F: Fn(&P) + 'static>(this: *mut ffi::GWeatherLocationEntry, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(LocationEntry::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::location\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_location_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for LocationEntry {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("LocationEntry")
    }
}
