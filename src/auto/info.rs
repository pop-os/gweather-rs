// Generated by gir (https://github.com/gtk-rs/gir @ 350409c)
// from 
// from gir-files (./gir-files @ 38b7451)
// DO NOT EDIT

use crate::MoonLatitude;
use crate::MoonPhase;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "GWeatherInfo")]
    pub struct Info(Object<ffi::GWeatherInfo, ffi::GWeatherInfoClass>);

    match fn {
        type_ => || ffi::gweather_info_get_type(),
    }
}

impl Info {
    //#[doc(alias = "gweather_info_new")]
    //pub fn new(location: /*Ignored*/Option<&Location>) -> Info {
    //    unsafe { TODO: call ffi:gweather_info_new() }
    //}

    #[doc(alias = "gweather_info_abort")]
    pub fn abort(&self) {
        unsafe {
            ffi::gweather_info_abort(self.to_glib_none().0);
        }
    }

    #[doc(alias = "gweather_info_get_apparent")]
    #[doc(alias = "get_apparent")]
    pub fn apparent(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::gweather_info_get_apparent(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gweather_info_get_application_id")]
    #[doc(alias = "get_application_id")]
    pub fn application_id(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gweather_info_get_application_id(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gweather_info_get_attribution")]
    #[doc(alias = "get_attribution")]
    pub fn attribution(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gweather_info_get_attribution(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gweather_info_get_conditions")]
    #[doc(alias = "get_conditions")]
    pub fn conditions(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::gweather_info_get_conditions(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gweather_info_get_contact_info")]
    #[doc(alias = "get_contact_info")]
    pub fn contact_info(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gweather_info_get_contact_info(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gweather_info_get_dew")]
    #[doc(alias = "get_dew")]
    pub fn dew(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::gweather_info_get_dew(self.to_glib_none().0))
        }
    }

    //#[doc(alias = "gweather_info_get_enabled_providers")]
    //#[doc(alias = "get_enabled_providers")]
    //pub fn enabled_providers(&self) -> /*Ignored*/Provider {
    //    unsafe { TODO: call ffi:gweather_info_get_enabled_providers() }
    //}

    #[doc(alias = "gweather_info_get_forecast_list")]
    #[doc(alias = "get_forecast_list")]
    pub fn forecast_list(&self) -> Vec<Info> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::gweather_info_get_forecast_list(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gweather_info_get_humidity")]
    #[doc(alias = "get_humidity")]
    pub fn humidity(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::gweather_info_get_humidity(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gweather_info_get_icon_name")]
    #[doc(alias = "get_icon_name")]
    pub fn icon_name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gweather_info_get_icon_name(self.to_glib_none().0))
        }
    }

    //#[doc(alias = "gweather_info_get_location")]
    //#[doc(alias = "get_location")]
    //pub fn location(&self) -> /*Ignored*/Option<Location> {
    //    unsafe { TODO: call ffi:gweather_info_get_location() }
    //}

    #[doc(alias = "gweather_info_get_location_name")]
    #[doc(alias = "get_location_name")]
    pub fn location_name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::gweather_info_get_location_name(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gweather_info_get_pressure")]
    #[doc(alias = "get_pressure")]
    pub fn pressure(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::gweather_info_get_pressure(self.to_glib_none().0))
        }
    }

    //#[doc(alias = "gweather_info_get_radar")]
    //#[doc(alias = "get_radar")]
    //pub fn radar(&self) -> /*Ignored*/Option<gdk_pixbuf::PixbufAnimation> {
    //    unsafe { TODO: call ffi:gweather_info_get_radar() }
    //}

    #[doc(alias = "gweather_info_get_sky")]
    #[doc(alias = "get_sky")]
    pub fn sky(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::gweather_info_get_sky(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gweather_info_get_sunrise")]
    #[doc(alias = "get_sunrise")]
    pub fn sunrise(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::gweather_info_get_sunrise(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gweather_info_get_sunset")]
    #[doc(alias = "get_sunset")]
    pub fn sunset(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::gweather_info_get_sunset(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gweather_info_get_symbolic_icon_name")]
    #[doc(alias = "get_symbolic_icon_name")]
    pub fn symbolic_icon_name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gweather_info_get_symbolic_icon_name(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gweather_info_get_temp")]
    #[doc(alias = "get_temp")]
    pub fn temp(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::gweather_info_get_temp(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gweather_info_get_temp_max")]
    #[doc(alias = "get_temp_max")]
    pub fn temp_max(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::gweather_info_get_temp_max(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gweather_info_get_temp_min")]
    #[doc(alias = "get_temp_min")]
    pub fn temp_min(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::gweather_info_get_temp_min(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gweather_info_get_temp_summary")]
    #[doc(alias = "get_temp_summary")]
    pub fn temp_summary(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::gweather_info_get_temp_summary(self.to_glib_none().0))
        }
    }

    //#[doc(alias = "gweather_info_get_upcoming_moonphases")]
    //#[doc(alias = "get_upcoming_moonphases")]
    //pub fn upcoming_moonphases(&self, phases: /*Unimplemented*/FixedArray TypeId { ns_id: 0, id: 17 }; 4) -> bool {
    //    unsafe { TODO: call ffi:gweather_info_get_upcoming_moonphases() }
    //}

    //#[doc(alias = "gweather_info_get_value_apparent")]
    //#[doc(alias = "get_value_apparent")]
    //pub fn value_apparent(&self, unit: /*Ignored*/TemperatureUnit) -> Option<f64> {
    //    unsafe { TODO: call ffi:gweather_info_get_value_apparent() }
    //}

    //#[doc(alias = "gweather_info_get_value_conditions")]
    //#[doc(alias = "get_value_conditions")]
    //pub fn value_conditions(&self) -> Option<(/*Ignored*/ConditionPhenomenon, /*Ignored*/ConditionQualifier)> {
    //    unsafe { TODO: call ffi:gweather_info_get_value_conditions() }
    //}

    //#[doc(alias = "gweather_info_get_value_dew")]
    //#[doc(alias = "get_value_dew")]
    //pub fn value_dew(&self, unit: /*Ignored*/TemperatureUnit) -> Option<f64> {
    //    unsafe { TODO: call ffi:gweather_info_get_value_dew() }
    //}

    #[doc(alias = "gweather_info_get_value_moonphase")]
    #[doc(alias = "get_value_moonphase")]
    pub fn value_moonphase(&self) -> Option<(MoonPhase, MoonLatitude)> {
        unsafe {
            let mut value = mem::MaybeUninit::uninit();
            let mut lat = mem::MaybeUninit::uninit();
            let ret = from_glib(ffi::gweather_info_get_value_moonphase(self.to_glib_none().0, value.as_mut_ptr(), lat.as_mut_ptr()));
            let value = value.assume_init();
            let lat = lat.assume_init();
            if ret { Some((value, lat)) } else { None }
        }
    }

    //#[doc(alias = "gweather_info_get_value_pressure")]
    //#[doc(alias = "get_value_pressure")]
    //pub fn value_pressure(&self, unit: /*Ignored*/PressureUnit) -> Option<f64> {
    //    unsafe { TODO: call ffi:gweather_info_get_value_pressure() }
    //}

    //#[doc(alias = "gweather_info_get_value_sky")]
    //#[doc(alias = "get_value_sky")]
    //pub fn value_sky(&self) -> Option</*Ignored*/Sky> {
    //    unsafe { TODO: call ffi:gweather_info_get_value_sky() }
    //}

    #[doc(alias = "gweather_info_get_value_sunrise")]
    #[doc(alias = "get_value_sunrise")]
    pub fn value_sunrise(&self) -> Option<libc::c_ulong> {
        unsafe {
            let mut value = mem::MaybeUninit::uninit();
            let ret = from_glib(ffi::gweather_info_get_value_sunrise(self.to_glib_none().0, value.as_mut_ptr()));
            let value = value.assume_init();
            if ret { Some(value) } else { None }
        }
    }

    #[doc(alias = "gweather_info_get_value_sunset")]
    #[doc(alias = "get_value_sunset")]
    pub fn value_sunset(&self) -> Option<libc::c_ulong> {
        unsafe {
            let mut value = mem::MaybeUninit::uninit();
            let ret = from_glib(ffi::gweather_info_get_value_sunset(self.to_glib_none().0, value.as_mut_ptr()));
            let value = value.assume_init();
            if ret { Some(value) } else { None }
        }
    }

    //#[doc(alias = "gweather_info_get_value_temp")]
    //#[doc(alias = "get_value_temp")]
    //pub fn value_temp(&self, unit: /*Ignored*/TemperatureUnit) -> Option<f64> {
    //    unsafe { TODO: call ffi:gweather_info_get_value_temp() }
    //}

    //#[doc(alias = "gweather_info_get_value_temp_max")]
    //#[doc(alias = "get_value_temp_max")]
    //pub fn value_temp_max(&self, unit: /*Ignored*/TemperatureUnit) -> Option<f64> {
    //    unsafe { TODO: call ffi:gweather_info_get_value_temp_max() }
    //}

    //#[doc(alias = "gweather_info_get_value_temp_min")]
    //#[doc(alias = "get_value_temp_min")]
    //pub fn value_temp_min(&self, unit: /*Ignored*/TemperatureUnit) -> Option<f64> {
    //    unsafe { TODO: call ffi:gweather_info_get_value_temp_min() }
    //}

    #[doc(alias = "gweather_info_get_value_update")]
    #[doc(alias = "get_value_update")]
    pub fn value_update(&self) -> Option<libc::c_long> {
        unsafe {
            let mut value = mem::MaybeUninit::uninit();
            let ret = from_glib(ffi::gweather_info_get_value_update(self.to_glib_none().0, value.as_mut_ptr()));
            let value = value.assume_init();
            if ret { Some(value) } else { None }
        }
    }

    //#[doc(alias = "gweather_info_get_value_visibility")]
    //#[doc(alias = "get_value_visibility")]
    //pub fn value_visibility(&self, unit: /*Ignored*/DistanceUnit) -> Option<f64> {
    //    unsafe { TODO: call ffi:gweather_info_get_value_visibility() }
    //}

    //#[doc(alias = "gweather_info_get_value_wind")]
    //#[doc(alias = "get_value_wind")]
    //pub fn value_wind(&self, unit: /*Ignored*/SpeedUnit) -> Option<(f64, /*Ignored*/WindDirection)> {
    //    unsafe { TODO: call ffi:gweather_info_get_value_wind() }
    //}

    #[doc(alias = "gweather_info_get_visibility")]
    #[doc(alias = "get_visibility")]
    pub fn visibility(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::gweather_info_get_visibility(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gweather_info_get_weather_summary")]
    #[doc(alias = "get_weather_summary")]
    pub fn weather_summary(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::gweather_info_get_weather_summary(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gweather_info_get_wind")]
    #[doc(alias = "get_wind")]
    pub fn wind(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::gweather_info_get_wind(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gweather_info_is_daytime")]
    pub fn is_daytime(&self) -> bool {
        unsafe {
            from_glib(ffi::gweather_info_is_daytime(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gweather_info_is_valid")]
    pub fn is_valid(&self) -> bool {
        unsafe {
            from_glib(ffi::gweather_info_is_valid(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gweather_info_network_error")]
    pub fn network_error(&self) -> bool {
        unsafe {
            from_glib(ffi::gweather_info_network_error(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gweather_info_next_sun_event")]
    pub fn next_sun_event(&self) -> i32 {
        unsafe {
            ffi::gweather_info_next_sun_event(self.to_glib_none().0)
        }
    }

    #[doc(alias = "gweather_info_set_application_id")]
    pub fn set_application_id(&self, application_id: &str) {
        unsafe {
            ffi::gweather_info_set_application_id(self.to_glib_none().0, application_id.to_glib_none().0);
        }
    }

    #[doc(alias = "gweather_info_set_contact_info")]
    pub fn set_contact_info(&self, contact_info: &str) {
        unsafe {
            ffi::gweather_info_set_contact_info(self.to_glib_none().0, contact_info.to_glib_none().0);
        }
    }

    //#[doc(alias = "gweather_info_set_enabled_providers")]
    //pub fn set_enabled_providers(&self, providers: /*Ignored*/Provider) {
    //    unsafe { TODO: call ffi:gweather_info_set_enabled_providers() }
    //}

    //#[doc(alias = "gweather_info_set_location")]
    //pub fn set_location(&self, location: /*Ignored*/Option<&Location>) {
    //    unsafe { TODO: call ffi:gweather_info_set_location() }
    //}

    #[doc(alias = "gweather_info_update")]
    pub fn update(&self) {
        unsafe {
            ffi::gweather_info_update(self.to_glib_none().0);
        }
    }

    #[doc(alias = "gweather_info_store_cache")]
    pub fn store_cache() {
        unsafe {
            ffi::gweather_info_store_cache();
        }
    }

    #[doc(alias = "updated")]
    pub fn connect_updated<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn updated_trampoline<F: Fn(&Info) + 'static>(this: *mut ffi::GWeatherInfo, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"updated\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(updated_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "application-id")]
    pub fn connect_application_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_application_id_trampoline<F: Fn(&Info) + 'static>(this: *mut ffi::GWeatherInfo, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::application-id\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_application_id_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "contact-info")]
    pub fn connect_contact_info_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_contact_info_trampoline<F: Fn(&Info) + 'static>(this: *mut ffi::GWeatherInfo, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::contact-info\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_contact_info_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "enabled-providers")]
    pub fn connect_enabled_providers_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enabled_providers_trampoline<F: Fn(&Info) + 'static>(this: *mut ffi::GWeatherInfo, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enabled-providers\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_enabled_providers_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "location")]
    pub fn connect_location_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_location_trampoline<F: Fn(&Info) + 'static>(this: *mut ffi::GWeatherInfo, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::location\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_location_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Info {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Info")
    }
}
